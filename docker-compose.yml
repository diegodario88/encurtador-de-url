volumes:
  cargo-cache: {}
  db:
  grafana-data:
services:
  encurtador-de-url:
    container_name: encurtador-de-url
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: .
      target: development
    environment:
      SQLX_OFFLINE: true
    command:
      - sh
      - -c
      - |
        RUST_LOG=debug cargo watch -x run
    ports:
      - 3000:3000
    volumes:
      - .:/opt/encurtador-de-url/app:z
      - ./target:/usr/local/cargo/target:z
    restart: unless-stopped
    extra_hosts:
      - "suindara.dev:172.17.0.1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://suindara.dev:3000/health"]
      interval: 5s
      timeout: 5s
      retries: 5
  postgres:
    container_name: postgres
    image: postgres:14.9
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRES_DB: ${POSTGRESQL_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 5
    volumes:
      - db:/var/lib/postgresql/data:z
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3030:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - .docker/grafana:/etc/grafana
    depends_on:
      encurtador-de-url:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    extra_hosts:
      - "suindara.dev:172.17.0.1"
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    extra_hosts:
      - "suindara.dev:172.17.0.1"
    volumes:
      - .docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    healthcheck:
      test: ["CMD", "pgrep", "prometheus"]
      interval: 3s
      timeout: 5s
      retries: 5
networks:
  default:
    driver: bridge
    name: development-network
